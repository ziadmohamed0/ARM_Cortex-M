
STM32F103xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000358  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000490  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00010490  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00010490  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000490  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000490  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000490  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007c4  00000000  00000000  000104b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000215  00000000  00000000  00010c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00010f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000bd8  00000000  00000000  00010fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000045d  00000000  00000000  00011b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003632  00000000  00000000  00011ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001bc  00000000  00000000  00015678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000470 	.word	0x08000470

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000470 	.word	0x08000470

08000170 <NVIC_setEnableIQRn>:
 */

#include "CortexM3_Core/CortexM3_Core_NVIC.h"

void NVIC_setEnableIQRn(IQRn_t copyIQRn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)copyIQRn >= 0)
	{
		if(((uint32_t)copyIQRn >= 0) && ((uint32_t)copyIQRn <= 31))
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b1f      	cmp	r3, #31
 800017e:	d80c      	bhi.n	800019a <NVIC_setEnableIQRn+0x2a>
		{
			SET_BIT(NVIC_ISER->NVIC_ISERn[0],(((uint32_t)copyIQRn) & 0x1F));
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <NVIC_setEnableIQRn+0x74>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	79fa      	ldrb	r2, [r7, #7]
 8000186:	f002 021f 	and.w	r2, r2, #31
 800018a:	2101      	movs	r1, #1
 800018c:	fa01 f202 	lsl.w	r2, r1, r2
 8000190:	4611      	mov	r1, r2
 8000192:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <NVIC_setEnableIQRn+0x74>)
 8000194:	430b      	orrs	r3, r1
 8000196:	6013      	str	r3, [r2, #0]

	else
	{
		/*	Nothing	*/
	}
}
 8000198:	e01e      	b.n	80001d8 <NVIC_setEnableIQRn+0x68>
		else if (((uint32_t)copyIQRn >= 32) && ((uint32_t)copyIQRn <= 63))
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b1f      	cmp	r3, #31
 800019e:	d90f      	bls.n	80001c0 <NVIC_setEnableIQRn+0x50>
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2b3f      	cmp	r3, #63	; 0x3f
 80001a4:	d80c      	bhi.n	80001c0 <NVIC_setEnableIQRn+0x50>
			SET_BIT(NVIC_ISER->NVIC_ISERn[1],(((uint32_t)copyIQRn) & 0x1F));
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <NVIC_setEnableIQRn+0x74>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	79fa      	ldrb	r2, [r7, #7]
 80001ac:	f002 021f 	and.w	r2, r2, #31
 80001b0:	2101      	movs	r1, #1
 80001b2:	fa01 f202 	lsl.w	r2, r1, r2
 80001b6:	4611      	mov	r1, r2
 80001b8:	4a0a      	ldr	r2, [pc, #40]	; (80001e4 <NVIC_setEnableIQRn+0x74>)
 80001ba:	430b      	orrs	r3, r1
 80001bc:	6053      	str	r3, [r2, #4]
}
 80001be:	e00b      	b.n	80001d8 <NVIC_setEnableIQRn+0x68>
			SET_BIT(NVIC_ISER->NVIC_ISERn[2],(((uint32_t)copyIQRn) & 0x1F));
 80001c0:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <NVIC_setEnableIQRn+0x74>)
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	f002 021f 	and.w	r2, r2, #31
 80001ca:	2101      	movs	r1, #1
 80001cc:	fa01 f202 	lsl.w	r2, r1, r2
 80001d0:	4611      	mov	r1, r2
 80001d2:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <NVIC_setEnableIQRn+0x74>)
 80001d4:	430b      	orrs	r3, r1
 80001d6:	6093      	str	r3, [r2, #8]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <NVIC_setDisableIQRn>:

void NVIC_setDisableIQRn(IQRn_t copyIQRn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)copyIQRn >= 0)
	{
		if(((uint32_t)copyIQRn >= 0) && ((uint32_t)copyIQRn <= 31))
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b1f      	cmp	r3, #31
 80001f6:	d80c      	bhi.n	8000212 <NVIC_setDisableIQRn+0x2a>
		{
			SET_BIT(NVIC_ICER->NVIC_ICERn[0],(((uint32_t)copyIQRn) & 0x1F));
 80001f8:	4b18      	ldr	r3, [pc, #96]	; (800025c <NVIC_setDisableIQRn+0x74>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	79fa      	ldrb	r2, [r7, #7]
 80001fe:	f002 021f 	and.w	r2, r2, #31
 8000202:	2101      	movs	r1, #1
 8000204:	fa01 f202 	lsl.w	r2, r1, r2
 8000208:	4611      	mov	r1, r2
 800020a:	4a14      	ldr	r2, [pc, #80]	; (800025c <NVIC_setDisableIQRn+0x74>)
 800020c:	430b      	orrs	r3, r1
 800020e:	6013      	str	r3, [r2, #0]

	else
	{
		/*	Nothing	*/
	}
}
 8000210:	e01e      	b.n	8000250 <NVIC_setDisableIQRn+0x68>
		else if (((uint32_t)copyIQRn >= 32) && ((uint32_t)copyIQRn <= 63))
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b1f      	cmp	r3, #31
 8000216:	d90f      	bls.n	8000238 <NVIC_setDisableIQRn+0x50>
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b3f      	cmp	r3, #63	; 0x3f
 800021c:	d80c      	bhi.n	8000238 <NVIC_setDisableIQRn+0x50>
			SET_BIT(NVIC_ICER->NVIC_ICERn[1],(((uint32_t)copyIQRn) & 0x1F));
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <NVIC_setDisableIQRn+0x74>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	f002 021f 	and.w	r2, r2, #31
 8000228:	2101      	movs	r1, #1
 800022a:	fa01 f202 	lsl.w	r2, r1, r2
 800022e:	4611      	mov	r1, r2
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <NVIC_setDisableIQRn+0x74>)
 8000232:	430b      	orrs	r3, r1
 8000234:	6053      	str	r3, [r2, #4]
}
 8000236:	e00b      	b.n	8000250 <NVIC_setDisableIQRn+0x68>
			SET_BIT(NVIC_ICER->NVIC_ICERn[2],(((uint32_t)copyIQRn) & 0x1F));
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <NVIC_setDisableIQRn+0x74>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	79fa      	ldrb	r2, [r7, #7]
 800023e:	f002 021f 	and.w	r2, r2, #31
 8000242:	2101      	movs	r1, #1
 8000244:	fa01 f202 	lsl.w	r2, r1, r2
 8000248:	4611      	mov	r1, r2
 800024a:	4a04      	ldr	r2, [pc, #16]	; (800025c <NVIC_setDisableIQRn+0x74>)
 800024c:	430b      	orrs	r3, r1
 800024e:	6093      	str	r3, [r2, #8]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000e180 	.word	0xe000e180

08000260 <NVIC_setPendingIQRn>:

void NVIC_setPendingIQRn(IQRn_t copyIQRn)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)copyIQRn >= 0)
	{
		if(((uint32_t)copyIQRn >= 0) && ((uint32_t)copyIQRn <= 31))
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b1f      	cmp	r3, #31
 800026e:	d80c      	bhi.n	800028a <NVIC_setPendingIQRn+0x2a>
		{
			SET_BIT(NVIC_ISPR->NVIC_ISPRn[0],(((uint32_t)copyIQRn) & 0x1F));
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <NVIC_setPendingIQRn+0x74>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	79fa      	ldrb	r2, [r7, #7]
 8000276:	f002 021f 	and.w	r2, r2, #31
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	4611      	mov	r1, r2
 8000282:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <NVIC_setPendingIQRn+0x74>)
 8000284:	430b      	orrs	r3, r1
 8000286:	6013      	str	r3, [r2, #0]

	else
	{
		/*	Nothing	*/
	}
}
 8000288:	e01e      	b.n	80002c8 <NVIC_setPendingIQRn+0x68>
		else if (((uint32_t)copyIQRn >= 32) && ((uint32_t)copyIQRn <= 63))
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b1f      	cmp	r3, #31
 800028e:	d90f      	bls.n	80002b0 <NVIC_setPendingIQRn+0x50>
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	2b3f      	cmp	r3, #63	; 0x3f
 8000294:	d80c      	bhi.n	80002b0 <NVIC_setPendingIQRn+0x50>
			SET_BIT(NVIC_ISPR->NVIC_ISPRn[1],(((uint32_t)copyIQRn) & 0x1F));
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <NVIC_setPendingIQRn+0x74>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	f002 021f 	and.w	r2, r2, #31
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <NVIC_setPendingIQRn+0x74>)
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6053      	str	r3, [r2, #4]
}
 80002ae:	e00b      	b.n	80002c8 <NVIC_setPendingIQRn+0x68>
			SET_BIT(NVIC_ISPR->NVIC_ISPRn[2],(((uint32_t)copyIQRn) & 0x1F));
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <NVIC_setPendingIQRn+0x74>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	79fa      	ldrb	r2, [r7, #7]
 80002b6:	f002 021f 	and.w	r2, r2, #31
 80002ba:	2101      	movs	r1, #1
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	4611      	mov	r1, r2
 80002c2:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <NVIC_setPendingIQRn+0x74>)
 80002c4:	430b      	orrs	r3, r1
 80002c6:	6093      	str	r3, [r2, #8]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e000e200 	.word	0xe000e200

080002d8 <NVIC_getActiveIQRn>:
		/*	Nothing	*/
	}
}

uint32_t NVIC_getActiveIQRn(IQRn_t copyIQRn)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint32_t retValue = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
	uint32_t value = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60bb      	str	r3, [r7, #8]

	if((uint32_t)copyIQRn >= 0)
	{
		if(((uint32_t)copyIQRn >= 0) && ((uint32_t)copyIQRn <= 31))
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b1f      	cmp	r3, #31
 80002ee:	d80a      	bhi.n	8000306 <NVIC_getActiveIQRn+0x2e>
		{
			retValue = GET_BIT(NVIC_IABR->NVIC_IABRn[0],(((uint32_t)copyIQRn) & 0x1F));
 80002f0:	4b19      	ldr	r3, [pc, #100]	; (8000358 <NVIC_getActiveIQRn+0x80>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	f003 031f 	and.w	r3, r3, #31
 80002fa:	fa22 f303 	lsr.w	r3, r2, r3
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	e01a      	b.n	800033c <NVIC_getActiveIQRn+0x64>
		}
		else if (((uint32_t)copyIQRn >= 32) && ((uint32_t)copyIQRn <= 63))
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b1f      	cmp	r3, #31
 800030a:	d90d      	bls.n	8000328 <NVIC_getActiveIQRn+0x50>
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	2b3f      	cmp	r3, #63	; 0x3f
 8000310:	d80a      	bhi.n	8000328 <NVIC_getActiveIQRn+0x50>
		{
			retValue = GET_BIT(NVIC_IABR->NVIC_IABRn[1],(((uint32_t)copyIQRn) & 0x1F));
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <NVIC_getActiveIQRn+0x80>)
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f003 031f 	and.w	r3, r3, #31
 800031c:	fa22 f303 	lsr.w	r3, r2, r3
 8000320:	f003 0301 	and.w	r3, r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e009      	b.n	800033c <NVIC_getActiveIQRn+0x64>
		}
		else
		{
			retValue = GET_BIT(NVIC_IABR->NVIC_IABRn[2],(((uint32_t)copyIQRn) & 0x1F));
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <NVIC_getActiveIQRn+0x80>)
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 031f 	and.w	r3, r3, #31
 8000332:	fa22 f303 	lsr.w	r3, r2, r3
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
		}

		if(retValue !=0)
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <NVIC_getActiveIQRn+0x70>
			value = 1UL;
 8000342:	2301      	movs	r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	e001      	b.n	800034c <NVIC_getActiveIQRn+0x74>
		else
			value = 0UL;
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]

		return value;
 800034c:	68bb      	ldr	r3, [r7, #8]

	else
	{
		/*	Nothing	*/
	}
}
 800034e:	4618      	mov	r0, r3
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000e300 	.word	0xe000e300

0800035c <main>:

volatile uint32_t USART3_IRQHandler_Active_flag0 = 0;
volatile uint32_t USART3_IRQHandler_Active_flag1 = 0;

int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	NVIC_setEnableIQRn(RCC_IQRn);
 8000360:	2005      	movs	r0, #5
 8000362:	f7ff ff05 	bl	8000170 <NVIC_setEnableIQRn>
	NVIC_setEnableIQRn(USART3_IQRn);
 8000366:	2027      	movs	r0, #39	; 0x27
 8000368:	f7ff ff02 	bl	8000170 <NVIC_setEnableIQRn>

	NVIC_setPendingIQRn(RCC_IQRn);
 800036c:	2005      	movs	r0, #5
 800036e:	f7ff ff77 	bl	8000260 <NVIC_setPendingIQRn>
	NVIC_setPendingIQRn(USART3_IQRn);
 8000372:	2027      	movs	r0, #39	; 0x27
 8000374:	f7ff ff74 	bl	8000260 <NVIC_setPendingIQRn>

	NVIC_setDisableIQRn(RCC_IQRn);
 8000378:	2005      	movs	r0, #5
 800037a:	f7ff ff35 	bl	80001e8 <NVIC_setDisableIQRn>
	NVIC_setDisableIQRn(USART3_IQRn);
 800037e:	2027      	movs	r0, #39	; 0x27
 8000380:	f7ff ff32 	bl	80001e8 <NVIC_setDisableIQRn>

	while(1)
	{
		USART3_IRQHandler_Active_flag1 = NVIC_getActiveIQRn(USART3_IQRn);
 8000384:	2027      	movs	r0, #39	; 0x27
 8000386:	f7ff ffa7 	bl	80002d8 <NVIC_getActiveIQRn>
 800038a:	4603      	mov	r3, r0
 800038c:	4a01      	ldr	r2, [pc, #4]	; (8000394 <main+0x38>)
 800038e:	6013      	str	r3, [r2, #0]
 8000390:	e7f8      	b.n	8000384 <main+0x28>
 8000392:	bf00      	nop
 8000394:	20000028 	.word	0x20000028

08000398 <RCC_IRQHandler>:
	}
}

void RCC_IRQHandler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	RCC_IRQHandler_flag = 1;
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <RCC_IRQHandler+0x14>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	USART3_IRQHandler_flag = 1;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <USART3_IRQHandler+0x1c>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	601a      	str	r2, [r3, #0]
	USART3_IRQHandler_Active_flag0 = NVIC_getActiveIQRn(USART3_IQRn);
 80003ba:	2027      	movs	r0, #39	; 0x27
 80003bc:	f7ff ff8c 	bl	80002d8 <NVIC_getActiveIQRn>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4a03      	ldr	r2, [pc, #12]	; (80003d0 <USART3_IRQHandler+0x20>)
 80003c4:	6013      	str	r3, [r2, #0]
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000020 	.word	0x20000020
 80003d0:	20000024 	.word	0x20000024

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	; (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	; (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000402:	f000 f811 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f7ff ffa9 	bl	800035c <main>

0800040a <LoopForever>:

LoopForever:
  b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000418:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 800041c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000420:	2000002c 	.word	0x2000002c

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_2_IRQHandler>
	...

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	2600      	movs	r6, #0
 800042c:	4d0c      	ldr	r5, [pc, #48]	; (8000460 <__libc_init_array+0x38>)
 800042e:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	f000 f81a 	bl	8000470 <_init>
 800043c:	2600      	movs	r6, #0
 800043e:	4d0a      	ldr	r5, [pc, #40]	; (8000468 <__libc_init_array+0x40>)
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <__libc_init_array+0x44>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f855 3b04 	ldr.w	r3, [r5], #4
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
