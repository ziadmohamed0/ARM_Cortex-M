
STM32F102xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000310  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  4 .ARM          00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000448  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000448  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000689  00000000  00000000  00010471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000030c  00000000  00000000  00010afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00010e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00010ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000001fb  00000000  00000000  00010f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006c0  00000000  00000000  0001117b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000040dc  00000000  00000000  0001183b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000234  00000000  00000000  00015968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000428 	.word	0x08000428

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000428 	.word	0x08000428

08000170 <SCB_setGroupPriority>:
 */

#include "CortexM3_Core/CortexM3_Core_SCB.h"

void SCB_setGroupPriority(SCB_GROUPPRIORITIES_t copyGroupPriority)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	copyGroupPriority = ((uint32_t)copyGroupPriority & 0x07);
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 0307 	and.w	r3, r3, #7
 8000180:	71fb      	strb	r3, [r7, #7]
	uint32_t RegValue = SCB->AIRCR;
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <SCB_setGroupPriority+0x48>)
 8000184:	68db      	ldr	r3, [r3, #12]
 8000186:	60fb      	str	r3, [r7, #12]

	RegValue &= ~(SCB_GROUP_PRIORTY_MSK | SCB_VECTKEY_MSK);
 8000188:	68fa      	ldr	r2, [r7, #12]
 800018a:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800018e:	4013      	ands	r3, r2
 8000190:	60fb      	str	r3, [r7, #12]

	RegValue = (RegValue | (VECTKEY_STATUSE << SCB_VECTKEY_POS) | (copyGroupPriority << SCB_GROUP_PRIORTY_POS));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	021b      	lsls	r3, r3, #8
 8000196:	461a      	mov	r2, r3
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4313      	orrs	r3, r2
 800019c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a4:	60fb      	str	r3, [r7, #12]
	SCB->AIRCR = RegValue;
 80001a6:	4a04      	ldr	r2, [pc, #16]	; (80001b8 <SCB_setGroupPriority+0x48>)
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	60d3      	str	r3, [r2, #12]
}
 80001ac:	bf00      	nop
 80001ae:	3714      	adds	r7, #20
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	e000ed00 	.word	0xe000ed00

080001bc <Systick_init>:

static  ptrFunction SystickCallBack = NULL;
static volatile uint8_t		SystickMode		= Systick_singleInterval_Mode;

Return_t Systick_init(uint32_t copyTicks)
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	uint8_t retValue = Ret_OK;
 80001c4:	2301      	movs	r3, #1
 80001c6:	73fb      	strb	r3, [r7, #15]
	if(copyTicks > Systick_CSR_RELOAD_MSK)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80001ce:	d302      	bcc.n	80001d6 <Systick_init+0x1a>
	{
		retValue = Ret_ERROR;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	e017      	b.n	8000206 <Systick_init+0x4a>
	}
	else
	{
		CLR_BIT(Systick->SYST_CSR,Systick_CSR_ENABLE_Pos);
 80001d6:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <Systick_init+0x58>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <Systick_init+0x58>)
 80001dc:	f023 0301 	bic.w	r3, r3, #1
 80001e0:	6013      	str	r3, [r2, #0]
		Systick->SYST_RVR = copyTicks;
 80001e2:	4a0c      	ldr	r2, [pc, #48]	; (8000214 <Systick_init+0x58>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	6053      	str	r3, [r2, #4]
		Systick->SYST_CVR = 0;
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <Systick_init+0x58>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

	#if		(Systick_CLK_COURCE == Systick_CLK_COURCE_DIV_1)
			SET_BIT(Systick->SYST_CSR, Systick_CSR_CLKSOURCE_Pos);
	#elif	(Systick_CLK_COURCE == Systick_CLK_COURCE_DIV_8)
			CLR_BIT(Systick->SYST_CSR, Systick_CSR_CLKSOURCE_Pos);
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <Systick_init+0x58>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a08      	ldr	r2, [pc, #32]	; (8000214 <Systick_init+0x58>)
 80001f4:	f023 0304 	bic.w	r3, r3, #4
 80001f8:	6013      	str	r3, [r2, #0]
	#else
	#error	"Invalid Clock Source"
	#endif
			CLR_BIT(Systick->SYST_CSR, Systick_CSR_TICKINT_Pos);
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <Systick_init+0x58>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a05      	ldr	r2, [pc, #20]	; (8000214 <Systick_init+0x58>)
 8000200:	f023 0302 	bic.w	r3, r3, #2
 8000204:	6013      	str	r3, [r2, #0]
	}

	return retValue;
 8000206:	7bfb      	ldrb	r3, [r7, #15]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <Systick_deInit>:

void Systick_deInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	CLR_BIT(Systick->SYST_CSR,Systick_CSR_ENABLE_Pos);
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <Systick_deInit+0x30>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <Systick_deInit+0x30>)
 8000222:	f023 0301 	bic.w	r3, r3, #1
 8000226:	6013      	str	r3, [r2, #0]
	Systick->SYST_RVR = 0;
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <Systick_deInit+0x30>)
 800022a:	2200      	movs	r2, #0
 800022c:	605a      	str	r2, [r3, #4]
	Systick->SYST_CVR = 0;
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <Systick_deInit+0x30>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
	CLR_BIT(Systick->SYST_CSR, Systick_CSR_TICKINT_Pos);
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <Systick_deInit+0x30>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a03      	ldr	r2, [pc, #12]	; (8000248 <Systick_deInit+0x30>)
 800023a:	f023 0302 	bic.w	r3, r3, #2
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	e000e010 	.word	0xe000e010

0800024c <Systick_singleInterval>:
	Systick->SYST_RVR = 0;
	Systick->SYST_CVR = 0;
}

void Systick_singleInterval(uint32_t copyTicks,ptrFunction *callBack)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	if(callBack == NULL){
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d014      	beq.n	8000286 <Systick_singleInterval+0x3a>
	}
	else
	{
		Systick->SYST_RVR = copyTicks;
 800025c:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <Systick_singleInterval+0x44>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6053      	str	r3, [r2, #4]
		SystickCallBack   = callBack;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <Systick_singleInterval+0x48>)
 8000266:	6013      	str	r3, [r2, #0]
		SystickMode		  = Systick_singleInterval_Mode;
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <Systick_singleInterval+0x4c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
		SET_BIT(Systick->SYST_CSR, Systick_CSR_TICKINT_Pos);
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <Systick_singleInterval+0x44>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <Systick_singleInterval+0x44>)
 8000274:	f043 0302 	orr.w	r3, r3, #2
 8000278:	6013      	str	r3, [r2, #0]
		SET_BIT(Systick->SYST_CSR,Systick_CSR_ENABLE_Pos);
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <Systick_singleInterval+0x44>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <Systick_singleInterval+0x44>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6013      	str	r3, [r2, #0]
	}
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	e000e010 	.word	0xe000e010
 8000294:	2000001c 	.word	0x2000001c
 8000298:	20000020 	.word	0x20000020

0800029c <Systick_periodicInterval>:

void Systick_periodicInterval(uint32_t copyTicks,ptrFunction *callBack)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	if(callBack == NULL){
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d014      	beq.n	80002d6 <Systick_periodicInterval+0x3a>
	}
	else
	{
		Systick->SYST_RVR = copyTicks;
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <Systick_periodicInterval+0x44>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	6053      	str	r3, [r2, #4]
		SystickCallBack   = callBack;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <Systick_periodicInterval+0x48>)
 80002b6:	6013      	str	r3, [r2, #0]
		SystickMode		  = Systick_periodicInterval_Mode;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <Systick_periodicInterval+0x4c>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
		SET_BIT(Systick->SYST_CSR, Systick_CSR_TICKINT_Pos);
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <Systick_periodicInterval+0x44>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <Systick_periodicInterval+0x44>)
 80002c4:	f043 0302 	orr.w	r3, r3, #2
 80002c8:	6013      	str	r3, [r2, #0]
		SET_BIT(Systick->SYST_CSR,Systick_CSR_ENABLE_Pos);
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <Systick_periodicInterval+0x44>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <Systick_periodicInterval+0x44>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]
	}
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	e000e010 	.word	0xe000e010
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	20000020 	.word	0x20000020

080002ec <SysTick_Handler>:
	retValue = Systick->SYST_RVR - Systick->SYST_CVR;
	return retValue;
}

void SysTick_Handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	if(SystickMode == Systick_singleInterval_Mode)
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <SysTick_Handler+0x24>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d101      	bne.n	80002fe <SysTick_Handler+0x12>
	{
		Systick_deInit();
 80002fa:	f7ff ff8d 	bl	8000218 <Systick_deInit>
	}
	if(SystickCallBack)
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <SysTick_Handler+0x28>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <SysTick_Handler+0x20>
	{
		SystickCallBack();
 8000306:	4b03      	ldr	r3, [pc, #12]	; (8000314 <SysTick_Handler+0x28>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4798      	blx	r3
	}
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000020 	.word	0x20000020
 8000314:	2000001c 	.word	0x2000001c

08000318 <SystickFunc1>:

uint32_t Var1 = 0;
uint32_t volatile Var2 = 0;
uint32_t volatile Var3 = 0;

void SystickFunc1(void){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	Var2++;
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <SystickFunc1+0x18>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	4a03      	ldr	r2, [pc, #12]	; (8000330 <SystickFunc1+0x18>)
 8000324:	6013      	str	r3, [r2, #0]
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000028 	.word	0x20000028

08000334 <SystickFunc2>:

void SystickFunc2(void){
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	Var3++;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <SystickFunc2+0x18>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a03      	ldr	r2, [pc, #12]	; (800034c <SystickFunc2+0x18>)
 8000340:	6013      	str	r3, [r2, #0]
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	2000002c 	.word	0x2000002c

08000350 <main>:
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	SCB_setGroupPriority(SCB_GROUPPRIORITIES_2);
 8000354:	2005      	movs	r0, #5
 8000356:	f7ff ff0b 	bl	8000170 <SCB_setGroupPriority>
	Var1 = Systick_init(1000000);
 800035a:	4808      	ldr	r0, [pc, #32]	; (800037c <main+0x2c>)
 800035c:	f7ff ff2e 	bl	80001bc <Systick_init>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <main+0x30>)
 8000366:	601a      	str	r2, [r3, #0]
	Systick_singleInterval(1000000, SystickFunc1);
 8000368:	4906      	ldr	r1, [pc, #24]	; (8000384 <main+0x34>)
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <main+0x2c>)
 800036c:	f7ff ff6e 	bl	800024c <Systick_singleInterval>
	Systick_periodicInterval(1000000, SystickFunc2);
 8000370:	4905      	ldr	r1, [pc, #20]	; (8000388 <main+0x38>)
 8000372:	4802      	ldr	r0, [pc, #8]	; (800037c <main+0x2c>)
 8000374:	f7ff ff92 	bl	800029c <Systick_periodicInterval>

	while(1)
 8000378:	e7fe      	b.n	8000378 <main+0x28>
 800037a:	bf00      	nop
 800037c:	000f4240 	.word	0x000f4240
 8000380:	20000024 	.word	0x20000024
 8000384:	08000319 	.word	0x08000319
 8000388:	08000335 	.word	0x08000335

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000390:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 f811 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ffc7 	bl	8000350 <main>

080003c2 <LoopForever>:

LoopForever:
  b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d0:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d8:	20000030 	.word	0x20000030

080003dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC1_2_IRQHandler>
	...

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	2600      	movs	r6, #0
 80003e4:	4d0c      	ldr	r5, [pc, #48]	; (8000418 <__libc_init_array+0x38>)
 80003e6:	4c0d      	ldr	r4, [pc, #52]	; (800041c <__libc_init_array+0x3c>)
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	f000 f81a 	bl	8000428 <_init>
 80003f4:	2600      	movs	r6, #0
 80003f6:	4d0a      	ldr	r5, [pc, #40]	; (8000420 <__libc_init_array+0x40>)
 80003f8:	4c0a      	ldr	r4, [pc, #40]	; (8000424 <__libc_init_array+0x44>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000440 	.word	0x08000440
 800041c:	08000440 	.word	0x08000440
 8000420:	08000440 	.word	0x08000440
 8000424:	08000444 	.word	0x08000444

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
